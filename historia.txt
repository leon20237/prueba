esta es la historia

de un personaje de ficción que asesinó a 3 ñeros 

code // abre Visual studio code 
history // Muestra el historial de comandos utilizados
git init // Indico que es la carpeta master y es donde se van a manejar todos los archivos del proyecto
git status // Muestra el estado del proyecto y muestra como estàn los archivos
git add <file> // Adiciona el archivo a seguimiento y control por parte de Git
git add . // Adiciona todos los archivos de la carpeta raiz
git rm --cached <file> // saca el archivo de seguimiento de Git, es como quitarle el add
git commit -m "Este es el primer commit del archivo historia.txt" // se crean los commits
git config // Muestra las configuraciones que tiene GIT
git config --list // Muestra la configuraciòn por defecto y lo que le hace falta
Se requiere configurar el perfil del usuario
git config --global user.name "Faiber Leòn" // Le estoy iondicando mi nombre de usuario a GIT
git config --global user.email "leon20237@gmail.com" // Le estoy indicando mi correo de usuario a GIT
git log <file> o no <file> // Muestra el historial del archivo
git show <file> // Muestra los cambios internos realizados al archivo
Si se realiza un commit sin un mensaje, GIT lo lleva a una pantalla en la cual lo obliga a ingresar el mensaje.
Despùes de haber enviado el mensaje, para salir de esta pantalla se requiere introducir la siguiente convinaciòn de teclas: esc+shift+zz
git diff <Nùmero hexa de guardado> <Nùmero hexa de guardado> // Muestra los cambios realiza entre los 2 commits
git reset <Número de hexa guardado> --hard // devuelve a una versión anterior el o los archivos
git log --stat // muestra los cambios especificos y en que archivos a partir del commit
git checkout <Nùmero hexa de guardado> <file> // Con esto se puede ver una versión anterior **Pero si le da commit queda en esa versión
git checkout master <file> // Con esto se llama la versión master y queda en esta versión si se aplica commit
git rm //Este comando elimina archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

it rm --cached // Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.

git rm --force // Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git reset // Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

git reset --soft // Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.

git reset --hard // Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

git reset HEAD // Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

git commit -am // otra manera de agregar los cambios haciendo add y commit en simultaneo

git branch <nombre de branch> // crea un branch nuevo

ssh-keygen -t rsa -b 4096 -C "leon20237@gmail" // Este comando es para configurar las llaves publicas y privadas en GIT